const { Scenes, Markup} = require("telegraf");
const { WizardScene} = Scenes;
const {makeRequest} = require("../helpers/makeRequest");
const {v4: uuid} = require("uuid");

function isValidEmail(email) {
    const emailRegex = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
}


const authScene = new WizardScene(
    'authScene',
    async (ctx) => {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ email')
        return ctx.wizard.next();
    },
    async (ctx) => {
        if(!isValidEmail(ctx.message.text)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            return ctx.scene.enter('authScene');
        }
        const RqUid = uuid();
        const bearer = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRlZmQxMmFjLTk4NzYtNDA3Ny1hMmI3LTVhOWQyNDBiMmMxNCIsInBlcm1pc3Npb25zIjpbMTNdLCJpYXQiOjE2MzI5NDk5NzYsImV4cCI6MjEwNjMxMzk3Nn0.0XOonPE5a6DpgmPrLTcMhdZCJ16QovyKqTNu8UUxA50'
        const body = {
            email: ctx.message.text,
            prefix: 'prefix'
        }
        const headers = {
            'authorization': bearer,
            'x-request-id': RqUid
        }
        // save to session
        ctx.session.email = ctx.message.text;
        try {
            await makeRequest(ctx, 'https://api.mesto.co/v1/email/sendTelegramLink', "POST", body, headers)
            // await ctx.reply('–í–∞–º –Ω–∞ –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –Ω–µ–π')
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á')
        } catch (e){
            await ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            return ctx.scene.enter('authScene');
        }
        return ctx.wizard.next();
    },
    async (ctx) => {
        // https://api.mesto.co/v1/auth/checkTelegramSecret
        ctx.session.password = ctx.message.text;
        const RqUid = uuid();
        const bearer = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRlZmQxMmFjLTk4NzYtNDA3Ny1hMmI3LTVhOWQyNDBiMmMxNCIsInBlcm1pc3Npb25zIjpbMTNdLCJpYXQiOjE2MzI5NDk5NzYsImV4cCI6MjEwNjMxMzk3Nn0.0XOonPE5a6DpgmPrLTcMhdZCJ16QovyKqTNu8UUxA50'
        const body = {
            email: ctx.session.email,
            secret: ctx.message.text
        }
        const headers = {
            'authorization': bearer,
            'x-request-id': RqUid
        }
        try {
            await makeRequest(ctx, 'https://api.mesto.co/v1/auth/checkTelegramSecret', "POST", body, headers)
            await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', Markup.keyboard([
                    [Markup.button.callback(`üí¨ –ß–∞—Ç—ã`, 'chats'), Markup.button.callback(`üìÖ –°–æ–±—ã—Ç–∏—è`, 'events'),Markup.button.callback(`üë• –õ—é–¥–∏`, 'people')],
                    [Markup.button.callback(`üèÑ –õ–µ–Ω—Ç–∞`, 'feed'), Markup.button.callback(`‚öôÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç`, 'settings'),Markup.button.callback(`‚ùì FAQ`, 'stats')],
                ]))
        } catch {
            await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
            return ctx.scene.enter('authScene');
        }
    },
);

module.exports = {authScene};