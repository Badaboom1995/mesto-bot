// write telegram bot using telegraph
const { Telegraf, Markup, Scenes, session } = require('telegraf');
const {createNavigation} = require('./createNavigation.js');
const {authScene} = require("./scenes/authScene");
const {makeKeyboard} = require("./helpers/MakeInlineKeyboard");
require('dotenv').config()
const express = require('express');
const bodyParser = require('body-parser');
const {makeRequest} = require("./helpers/makeRequest");
const {v4: uuid} = require("uuid");
const token = process.env.BOT_TOKEN
const bot = new Telegraf(token);
const {supabase} = require("./helpers/supabase.js");
const {runPrivately} = require("./services/auth");
const stage = new Scenes.Stage([authScene]);

bot.use(session())
bot.use(stage.middleware());

const port = process.env.PORT || 3002;
const app = express();
app.use(bodyParser.json());
bot.telegram.setWebhook(`https://mesto-bot-c5a62508e033.herokuapp.com/bot${token}`);
app.use(bot.webhookCallback(`/bot${token}`));

app.post(`/bot${token}`, (req, res) => {
    res.sendStatus(200);
});

bot.start(async (ctx) => {
    if(ctx.startPayload) {
        const secret = ctx.startPayload.slice(6);
        const email = ctx.session.email;
        const RqUid = uuid();
        const bearer = process.env.BEARER_LONG;
        const body = {
            email,
            secret
        }
        const headers = {
            'authorization': bearer,
            'x-request-id': RqUid
        }
        try {
            await makeRequest(ctx, 'https://api.mesto.co/v1/auth/checkTelegramSecret', "POST", body, headers)
            await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', Markup.keyboard([
                [Markup.button.callback(`üí¨ –ß–∞—Ç—ã`, 'chats'), Markup.button.callback(`üìÖ –°–æ–±—ã—Ç–∏—è`, 'events'),Markup.button.callback(`üë• –õ—é–¥–∏`, 'people')],
                [Markup.button.callback(`üèÑ –õ–µ–Ω—Ç–∞`, 'feed'), Markup.button.callback(`‚öôÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç`, 'settings'),Markup.button.callback(`‚ùì FAQ`, 'stats')],
            ]))
            await supabase.from('Users').insert([{chat_id: ctx.message.chat.id, telegram:ctx.message.from.username, email, secret }]).then(res => {
                if(res.error) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
            })
        } catch(e) {
            await ctx.reply(e.message);
            return ctx.scene.enter('authScene');
        }
        return
    }
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', makeKeyboard(['–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'], 1,'auth'));
});

bot.action(/auth(.+)/, async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('authScene');
})

bot.on('text', (ctx) => {
    if(ctx.message.text === '/start') return
    if(ctx.message.text === 'asd') {
        runPrivately(ctx, () => {ctx.reply("Privately")})
    }
    if(ctx.message.text === `üí¨ –ß–∞—Ç—ã`) {
        runPrivately(ctx, () => {ctx.replyWithHTML(createNavigation())})
    }
    if(ctx.message.text === `üìÖ –°–æ–±—ã—Ç–∏—è`){
        ctx.replyWithHTML(`–î–æ–±–∞–≤—å—Ç–µ —Å–µ–±–µ <a href="https://calendar.google.com/calendar/b/1?cid=Mmk4MDJ0azNpbjdyNG0xZXA0amQ1OWoydG9AZ3JvdXAuY2FsZW5kYXIuZ29vZ2xlLmNvbQ">–≥—É–≥–ª-–∫–∞–ª–µ–Ω–¥–∞—Ä—å</a> —Å –æ–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω —Å–æ–±—ã—Ç–∏—è–º–∏ Mesto`)
    }
    if( ctx.message.text === `üë• –õ—é–¥–∏` || ctx.message.text === `‚öôÔ∏è –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç` || ctx.message.text === `‚ùì FAQ` || ctx.message.text === `üèÑ –õ–µ–Ω—Ç–∞`) {
        ctx.reply('–ü–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç!')
    }
});

bot.on('new_chat_members', (ctx) => {
    const chatId = ctx.chat.id;
    const userId = ctx.message.new_chat_members[0].id;
    const username = ctx.message.new_chat_members[0].username;
})

app.listen(port, () => {
    console.log(`Express server is listening on ${port}`);
});

// bot.launch();
module.exports = {bot};




